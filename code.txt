import SwiftUI
import CoreHaptics

struct ContentView: View {
    @State private var randomNumber = 0
    @State private var randomColorCode = "#FFFFFF"
    @State private var backgroundColor = Color.white
    
    // Declare hapticEngine as a State object
    @State private var hapticEngine: CHHapticEngine? = try? CHHapticEngine()

    var body: some View {
        ZStack {
            backgroundColor.edgesIgnoringSafeArea(.all)
            
            VStack {
                Spacer()
                Text("抽取的数字：")
                Text("\(randomNumber)")
                    .font(.system(size: 50, design: .rounded))
                    .fontWeight(.bold)
                    .foregroundColor(.black)
                
                Text("颜色代码：\(randomColorCode)")
                    .foregroundColor(.black)
                Spacer()
            }
            
            VStack {
                Spacer()
                Button(action: {
                    randomNumber = Int.random(in: 0...999)
                    backgroundColor = generateRandomColor()
                    randomColorCode = backgroundColor.toHexString()
                    
                    // Add this line to generate haptic feedback
                    generateHapticFeedback(intensity: randomNumber)
                }) {
                    Text("点击屏幕抽取数字")
                        .font(.system(size: 24))
                        .fontWeight(.bold)
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .cornerRadius(10)
                }
                .padding(.bottom)
            }
        }
    }

    func generateRandomColor() -> Color {
        let red = Double.random(in: 0...1)
        let green = Double.random(in: 0...1)
        let blue = Double.random(in: 0...1)
        return Color(red: red, green: green, blue: blue)
    }

    // Add a new function to generate haptic feedback based on the random number
    func generateHapticFeedback(intensity: Int) {
        guard let engine = hapticEngine else { return }

        let intensityValue = Float(intensity) / 999.0
        let hapticEvent = CHHapticEvent(eventType: .hapticTransient, parameters: [
            CHHapticEventParameter(parameterID: .hapticIntensity, value: intensityValue)
        ], relativeTime: 0)

        do {
            try engine.start()
            let pattern = try CHHapticPattern(events: [hapticEvent], parameters: [])
            let player = try engine.makePlayer(with: pattern)
            try player.start(atTime: CHHapticTimeImmediate)
        } catch {
            print("Failed to generate haptic feedback: \(error)")
        }

        engine.notifyWhenPlayersFinished { _ in
            return .stopEngine
        }
    }
}

extension Color {
    func toHexString() -> String {
        let components = self.cgColor!.components!
        let r = Int(components[0] * 255)
        let g = Int(components[1] * 255)
        let b = Int(components[2] * 255)
        return String(format: "#%02X%02X%02X", r, g, b)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
